
// Test √† ex√©cuter dans la console du navigateur pour diagnostiquer les probl√®mes GPS
console.log('üß™ Test de diagnostic GPS Frontend');

// 1. Test de support de la g√©olocalisation
console.log('\n1Ô∏è‚É£ Support de la g√©olocalisation:');
console.log('  - Navigator.geolocation disponible:', !!navigator.geolocation);
console.log('  - HTTPS:', location.protocol === 'https:');
console.log('  - Localhost:', location.hostname === 'localhost');

// 2. Test des permissions
navigator.permissions.query({name: 'geolocation'}).then(result => {
  console.log('  - Permission actuelle:', result.state);
  result.addEventListener('change', () => {
    console.log('  - Permission chang√©e vers:', result.state);
  });
});

// 3. Test de r√©cup√©ration des coordonn√©es
console.log('\n2Ô∏è‚É£ Test de r√©cup√©ration GPS:');
if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(
    (position) => {
      const lat = position.coords.latitude;
      const lon = position.coords.longitude;
      console.log('‚úÖ Position obtenue:');
      console.log('  - Latitude:', lat);
      console.log('  - Longitude:', lon);
      console.log('  - Pr√©cision:', position.coords.accuracy + 'm');
      console.log('  - Timestamp:', new Date(position.timestamp));
      
      // 4. Test de l'API avec ces coordonn√©es
      console.log('\n3Ô∏è‚É£ Test de l\'API avec coordonn√©es r√©elles:');
      fetch(`/api/places?lat=${lat}&lon=${lon}&radius=5`)
        .then(response => response.json())
        .then(data => {
          console.log('‚úÖ API r√©pond avec', data.places.length, 'lieux');
          if (data.places.length > 0) {
            console.log('  - Premier lieu:', data.places[0].name);
            console.log('  - Distance:', data.places[0].distance + 'km');
            console.log('  - Les 3 plus proches:');
            data.places.slice(0, 3).forEach((place, i) => {
              console.log(`    ${i+1}. ${place.name}: ${place.distance}km`);
            });
          }
        })
        .catch(error => {
          console.error('‚ùå Erreur API:', error);
        });
    },
    (error) => {
      console.error('‚ùå Erreur g√©olocalisation:', error.message);
      console.log('  - Code:', error.code);
      console.log('  - Message:', error.message);
      
      switch(error.code) {
        case error.PERMISSION_DENIED:
          console.log('  - Cause: Permission refus√©e par l\'utilisateur');
          break;
        case error.POSITION_UNAVAILABLE:
          console.log('  - Cause: Position non disponible');
          break;
        case error.TIMEOUT:
          console.log('  - Cause: Timeout de la requ√™te');
          break;
      }
    },
    {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 300000
    }
  );
} else {
  console.error('‚ùå G√©olocalisation non support√©e');
}

// 5. Test de d√©tection mobile
console.log('\n4Ô∏è‚É£ D√©tection de l\'environnement:');
console.log('  - User Agent:', navigator.userAgent);
console.log('  - Mobile d√©tect√©:', /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
console.log('  - Largeur √©cran:', window.innerWidth + 'px');

console.log('\nüéØ Test termin√©. Consultez les r√©sultats ci-dessus.');
