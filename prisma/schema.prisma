generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/accessibilite_app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  isAdmin       Boolean   @default(false) @map("is_admin")
  isBanned      Boolean   @default(false) @map("is_banned")
  accounts      Account[]
  sessions      Session[]
  ratings       Rating[]
  comments      Comment[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Place {
  id                      String   @id @default(cuid())
  name                    String
  address                 String
  city                    String
  postalCode              String   @map("postal_code")
  type                    PlaceType
  description             String?
  website                 String?
  phone                   String?
  imageUrl                String?  @map("image_url")
  latitude                Float?
  longitude               Float?
  averageMobilityRating   Float    @default(0) @map("average_mobility_rating")
  averageVisualRating     Float    @default(0) @map("average_visual_rating")
  averageHearingRating    Float    @default(0) @map("average_hearing_rating")
  averageToiletRating     Float    @default(0) @map("average_toilet_rating")
  averageParkingRating    Float    @default(0) @map("average_parking_rating")
  averageGuideDogRating   Float    @default(0) @map("average_guide_dog_rating")
  ratingsCount            Int      @default(0) @map("ratings_count")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  
  ratings                 Rating[]
  comments                Comment[]

  @@map("places")
}

model Rating {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  placeId               String   @map("place_id")
  mobilityRating        Int      @map("mobility_rating") // Note d'accessibilité mobilité réduite (1-5)
  visualRating          Int      @map("visual_rating") // Note d'accessibilité déficience visuelle (1-5)
  hearingRating         Int      @map("hearing_rating") // Note d'accessibilité déficience auditive (1-5)
  toiletRating          Int      @map("toilet_rating") // Note d'accessibilité des toilettes (1-5)
  parkingRating         Int      @map("parking_rating") // Note d'accessibilité du parking (1-5)
  guideDogRating        Int      @map("guide_dog_rating") // Note d'acceptation des chiens guides (1-5)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  place                 Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId])
  @@map("ratings")
}

model Comment {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  placeId           String   @map("place_id")
  parentId          String?  @map("parent_id") // ID du commentaire parent pour les réponses
  content           String
  imageUrl          String?  @map("image_url") // URL de l'image partagée
  accessibilityDetails String? @map("accessibility_details") // Détails spécifiques sur l'accessibilité
  wheelchairAccess  Boolean? @map("wheelchair_access")
  visualImpairment  Boolean? @map("visual_impairment")
  hearingImpairment Boolean? @map("hearing_impairment")
  mobilityIssues    Boolean? @map("mobility_issues")
  parkingAccess     Boolean? @map("parking_access")
  guideDogAccepted  Boolean? @map("guide_dog_accepted")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  place             Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  parent            Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies           Comment[] @relation("CommentReplies")

  @@map("comments")
}

enum PlaceType {
  RESTAURANT
  CINEMA
  PARC
  MUSEE
  BAR
  TOILETTES_PUBLIQUES
  HOPITAL
  ECOLE
  UNIVERSITE
  TRANSPORT
  HOTEL
  MAGASIN
  BUREAU
  AUTRE
}
